# JVM options
export JAVA_OPTS="-Xms128m -Xmx256m"

# Modify these lines to set your locale 
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Uncomment these lines to the set your machine's default locale (and comment out the UTF-8 ones)
# export LANG=$(locale -uU)
# export LC_CTYPE=$(locale -uU)
# export LC_ALL=$(locale -uU)

# Uncomment this to disable daily auto-update & proxy checks on startup (not recommended!)
# export DISABLE_CHECK_ON_STARTUP="true"

# Uncomment to increase/decrease the check connection timeout
# export CHECK_TIMEOUT_IN_SECS=4

# Uncomment this lines to set up your proxy
# export http_proxy=http://user:password@server:port
# export https_proxy=$http_proxy
# export ftp_proxy=$http_proxy
# export no_proxy=localhost

# User Agent section
# List of user agents: http://www.useragentstring.com/pages/useragentstring.php
# export USER_AGENT="Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))"

# Uncomment and increase the timeout period if you get errors/timeouts on babun check
# export CHECK_TIMEOUT_IN_SECS=4

# Uncomment to enable bloda detection
# export CYGWIN="nodosfilewarning mintty detect_bloda"

# Project Aliases
alias babunrc='nano ~/.babunrc'
alias sshvm='ssh 192.168.200.40'
alias pro='cd ~/../../cygdrive/c/grizzly'
alias pro.pn='cd ~/../../cygdrive/c/grizzly/personalpages'
alias pro.pn2='cd ~/../../cygdrive/c/grizzly/account-pages'
alias pro.pj='cd ~/../../cygdrive/c/grizzly/project-kenny'
alias pro.insight='cd ~/../../cygdrive/c/grizzly/insight-frontend'
# a hack to maksure webpack is running correctly using npm run start
# thanks to Windows10 machine
alias webpack='npm run start'
alias bsngserve='ng serve --host 0.0.0.0 --port 9047'
alias gst='git status'

#https://devhints.io/bash
#You can use bash programming to write functions :)

#Update Initial values here
INITIALS="KL"

ns () {
	ng serve --port $1
}

bsns () {
	ng serve --host 0.0.0.0 --port=$1
}

gpush () {
    git add .
    git commit -am $1
    git push
}

gdev () {
    git checkout develop
    git fetch
    git pull
}

gupdate () {
    git fetch && git pull --rebase
}

prepareFeatureName () {
    echo "$1" | sed "s/[:|'|\"|,|\ |\(|\)|-|/|@|&]/_/g" | sed -e "s/\"//g"
}

function newt {
	echo "[INPUT REQUIRED 1/2]: What is the ticket number?"
	read ticketNum
	ticketNum=$(echo "$ticketNum" | tr [a-z] [A-Z] )
	echo "==================================="
	echo "[TICKET NUMBER]=>" $ticketNum
	echo "==================================="
	echo "[INPUT REQUIRED 2/2]: What is the ticket description?"
	read ticketDescription
	echo "==================================="
	echo "[TICKET DESCRIPTION]=>" $ticketDescription
	echo "==================================="
	echo "[INFO] Generating branch and pushing it remotely..."
	
	if [[ -z $ticketNum ]]; then
		echo "FATAL ERROR: Ticket number cannot be empty!! Please try again."
		echo ""
	elif [[ -z $ticketDescription ]]; then
		echo "FATAL ERROR: Ticket description cannot be empty!! Please try again."
		echo ""
	elif (( 1 < 2 )); then
		startFeature "$ticketNum" "$ticketDescription"
	fi
}

startFeature () {
    ticketNumber=$1
    date=$2
    branchName=$(echo "release/"$ticketNumber"_"$INITIALS"_"$date)
    gupdate && git checkout -b $branchName && git push -u
}

startFeature () {
    ticketNumber=$1
    featureName=$(echo "$2" | sed "s/[:|'|\"|,|\ |\(|\)|-|/|@|&]/_/g" | sed "s/\",//g")
    branchName=$(echo "feature/"$ticketNumber"_"$INITIALS"_"$featureName)
    gupdate && git checkout -b $branchName && git push -u
}

resumeFeature () {
    git branch -a | grep -m 1 $1 | xargs git checkout
}

branchGrep () {
    git branch -a | grep $1;
}
